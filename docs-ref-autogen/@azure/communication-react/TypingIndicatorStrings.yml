### YamlMime:TSType
name: TypingIndicatorStrings
uid: '@azure/communication-react.TypingIndicatorStrings'
package: '@azure/communication-react'
summary: >-
  Strings of <xref:@azure/communication-react.ChatAdapter.sendTypingIndicator>
  that can be overridden.
fullName: TypingIndicatorStrings
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: delimiter
    uid: '@azure/communication-react.TypingIndicatorStrings.delimiter'
    package: '@azure/communication-react'
    summary: |+
      String to use as delimiter to separate multiple users.

      **Example**

      ```
      <TypingIndicator
       strings={{ delimiter: ' + ' }}
       typingUsers={[
         { userId: 'user1', displayName: 'Claire' },
         { userId: 'user2', displayName: 'Chris' },
         { userId: 'user3', displayName: 'Jill' }
       ]}
      />
      ```
      would be 'Claire + Chris + Jill are typing...'

    fullName: delimiter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delimiter: string'
      return:
        description: ''
        type: string
  - name: multipleUsers
    uid: '@azure/communication-react.TypingIndicatorStrings.multipleUsers'
    package: '@azure/communication-react'
    summary: >+
      String template to use when multiple users are typing. Placeholders:
      [users].


      **Example**


      ```

      <TypingIndicator
       strings={{ multipleUsers: '{users} are typing...' }}
       typingUsers={[
         { userId: 'user1', displayName: 'Claire' },
         { userId: 'user2', displayName: 'Chris' }
       ]}
      />

      ```

      would be 'Claire, Chris are typing...'

    fullName: multipleUsers
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multipleUsers: string'
      return:
        description: ''
        type: string
  - name: multipleUsersAbbreviateMany
    uid: >-
      @azure/communication-react.TypingIndicatorStrings.multipleUsersAbbreviateMany
    package: '@azure/communication-react'
    summary: >+
      String template to use when multiple users are typing with one other user
      abbreviated. Placeholders: [users, numOthers].


      **Example**


      ```

      <TypingIndicator
       strings={{ multipleUsersAbbreviateMany: '{users} and {numOthers} others are typing...' }}
       typingUsers={[
         { userId: 'user1', displayName: 'Claire Romanov' },
         { userId: 'user2', displayName: 'Chris Rutherford' },
         { userId: 'user3', displayName: 'Jill Vernblom' }
       ]}
      />

      ```

      would be 'Claire Romanov and 2 others are typing...'

    fullName: multipleUsersAbbreviateMany
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multipleUsersAbbreviateMany: string'
      return:
        description: ''
        type: string
  - name: multipleUsersAbbreviateOne
    uid: >-
      @azure/communication-react.TypingIndicatorStrings.multipleUsersAbbreviateOne
    package: '@azure/communication-react'
    summary: >+
      String template to use when multiple users are typing with one other user
      abbreviated. Placeholders: [users].


      **Example**


      ```typescript

      <TypingIndicator

      strings={{ multipleUsersAbbreviateOne: '{users} and 1 other are typing...'
      }}

      typingUsers={[

      { userId: 'user1', displayName: 'Claire Romanov' },

      { userId: 'user2', displayName: 'Chris Rutherford' }

      ]}

      />

      ```

      would be 'Claire Romanov and 1 other are typing...'

    fullName: multipleUsersAbbreviateOne
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multipleUsersAbbreviateOne: string'
      return:
        description: ''
        type: string
  - name: singleUser
    uid: '@azure/communication-react.TypingIndicatorStrings.singleUser'
    package: '@azure/communication-react'
    summary: |+
      String template to use when one user is typing. Placeholders: [user].

      **Example**

      ```
      <TypingIndicator
       strings={{ multipleUsersAbbreviateOne: '{users} is typing...' }}
       typingUsers={[{ userId: 'user1', displayName: 'Claire' }]}
      />
      ```
      would be 'Claire is typing...'

    fullName: singleUser
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'singleUser: string'
      return:
        description: ''
        type: string
